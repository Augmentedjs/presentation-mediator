{"version":3,"sources":["webpack://presentation-mediator/webpack/universalModuleDefinition","webpack://presentation-mediator/webpack/bootstrap","webpack://presentation-mediator/external {\"commonjs\":\"next-core-utilities\",\"commonjs2\":\"next-core-utilities\",\"amd\":\"next-core-utilities\",\"root\":\"next-core-utilities\"}","webpack://presentation-mediator/external {\"commonjs\":\"presentation-view\",\"commonjs2\":\"presentation-view\",\"amd\":\"presentation-view\",\"root\":\"presentation-view\"}","webpack://presentation-mediator/./src/colleague.js","webpack://presentation-mediator/./src/mediator.js"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__1__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Colleague","View","constructor","options","super","mediator","_mediator","sendMessage","message","data","trigger","console","warn","setMediatorMessageQueue","_setMediatorMessageQueue","_dismissMe","removeMediatorMessageQueue","Mediator","el","noEL","_defaultChannel","_defaultIdentifier","_channels","_colleagueMap","_subscriptions","colleague","channel","myChannelObject","unsubscribe","fn","identifier","delegateEvents","events","subscriptions","undelegateEvents","unsetSubscriptions","extend","length","subscription","once","$once","subscribe","observeColleague","callback","observeColleagueAndTrigger","args","dismissColleague","dismissColleagueTrigger","id","context","obj","push","on","publish","splice","subscribeOnce","getColleagues","getChannel"],"mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,EAAQG,QAAQ,uBAAwBA,QAAQ,sBACxC,mBAAXC,QAAyBA,OAAOC,IAC9CD,OAAO,wBAAyB,CAAC,sBAAuB,qBAAsBJ,GACpD,iBAAZC,QACdA,QAAQ,yBAA2BD,EAAQG,QAAQ,uBAAwBA,QAAQ,sBAEnFJ,EAAK,yBAA2BC,EAAQD,EAAK,uBAAwBA,EAAK,sBAR5E,CASGO,MAAM,SAASC,EAAgCC,GAClD,O,YCTE,IAAIC,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUV,QAGnC,IAAIC,EAASO,EAAiBE,GAAY,CACzCC,EAAGD,EACHE,GAAG,EACHZ,QAAS,IAUV,OANAa,EAAQH,GAAUI,KAAKb,EAAOD,QAASC,EAAQA,EAAOD,QAASS,GAG/DR,EAAOW,GAAI,EAGJX,EAAOD,QA0Df,OArDAS,EAAoBM,EAAIF,EAGxBJ,EAAoBO,EAAIR,EAGxBC,EAAoBQ,EAAI,SAASjB,EAASkB,EAAMC,GAC3CV,EAAoBW,EAAEpB,EAASkB,IAClCG,OAAOC,eAAetB,EAASkB,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEV,EAAoBgB,EAAI,SAASzB,GACX,oBAAX0B,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAetB,EAAS0B,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAetB,EAAS,aAAc,CAAE4B,OAAO,KAQvDnB,EAAoBoB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQnB,EAAoBmB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFAxB,EAAoBgB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOnB,EAAoBQ,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRvB,EAAoB2B,EAAI,SAASnC,GAChC,IAAIkB,EAASlB,GAAUA,EAAO8B,WAC7B,WAAwB,OAAO9B,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAQ,EAAoBQ,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRV,EAAoBW,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG7B,EAAoBgC,EAAI,SAIjBhC,EAAoBA,EAAoBiC,EAAI,G,gBClFrDzC,EAAOD,QAAUM,G,cCAjBL,EAAOD,QAAUO,G,yICYjB,MAAMoC,UAAkBC,OACtBC,YAAYC,GACVC,MAAMD,GACFA,GAAWA,EAAQE,SACrB3C,KAAK4C,UAAYD,SAEjB3C,KAAK4C,UAAY,KAUrBC,YAAYC,EAASC,GAMnB,OALI/C,KAAK4C,UACP5C,KAAK4C,UAAUI,QAAQF,EAASC,GAEhCE,QAAQC,KAAM,6CAA6ClD,KAAKa,KAAQb,KAAKa,KAAO,mCAE/EiC,EASTK,wBAAwBR,GACtB,OAAO3C,KAAKoD,yBAAyBT,GAGvCS,yBAAyBT,GAYvB,OAVIA,GACE3C,KAAK4C,WAGP5C,KAAK4C,UAAUS,WAAWrD,MAE5BA,KAAK4C,UAAYD,GAEjBM,QAAQC,KAAK,qDAERP,EAOTW,6BAEE,OADAtD,KAAK4C,UAAY,MACV,EAOT,eACE,OAAO5C,KAAK4C,UAGd,aAAaD,GACX,OAAOS,yBAAyBT,IAIrBL,QCmUAiB,MArYf,cAAuBjB,EACrBE,YAAYC,GACLA,IACHA,EAAU,IAEPA,EAAQe,KACXf,EAAQgB,MAAO,GAEjBf,MAAMD,GACNzC,KAAK0D,gBAxBe,mBAyBpB1D,KAAK2D,mBAxBkB,sBAyBvB3D,KAAK4D,UAAY,GACjB5D,KAAK6D,cAAgB,GACrB7D,KAAK8D,eAAiB,GAoCxBT,WAAWU,GACT,GAAIA,aAAqBzB,EAAW,CAClC,MAAM0B,EAAUhE,KAAK6D,cAAcE,GAAYE,EAAkBjE,KAAK4D,UAAUI,GAChF,OAAOhE,KAAKkE,YAAYF,EAASC,EAAgBE,GAAIJ,EAAWE,EAAgBG,YAElF,OAAO,KAQTC,eAAeC,GAGb,OAFA5B,MAAM2B,eAAeC,GACrBtE,KAAKuE,cAAgB,GACdD,EAQTE,iBAAiBF,GAGf,OAFA5B,MAAM8B,iBAAiBF,GACvBtE,KAAKyE,qBACEH,EAOT,oBACE,OAAOtE,KAAK8D,eAGd,kBAAkBS,GAKhB,GAJIA,GACFG,iBAAO1E,KAAK8D,gBAAkB,GAAIS,KAEpCA,EAAgBA,GAAiBvE,KAAK8D,iBACU,IAAzBS,EAAcI,OACnC,OAGF3E,KAAKyE,mBAAmBF,GAExB,IAAIjE,EAAI,EAAGC,EAAIgE,EAAcI,OAC7B,IAAKrE,EAAI,EAAGA,EAAIC,EAAGD,IAAK,CACtB,IAAIsE,EAAeL,EAAcjE,GAC7BuE,GAAO,EACPD,EAAaE,QACfF,EAAeA,EAAaE,MAC5BD,GAAO,GAEmB,iBAAjBD,IACTA,EAAe5E,KAAK4E,IAEtB5E,KAAK+E,UAAUH,EAAaZ,QAASY,EAAc5E,KAAM6E,GAE3D,OAAON,EAQTE,mBAAmBF,GAEjB,KADAA,EAAgBA,GAAiBvE,KAAK8D,iBACU,IAAzBS,EAAcI,OACnC,OAGF,IAAIrE,EAAI,EACR,MAAMC,EAAIgE,EAAcI,OAExB,IAAKrE,EAAI,EAAGA,EAAIC,EAAGD,IAAK,CACtB,IAAIsE,EAAeL,EAAcjE,GAC7BuE,GAAO,EACPD,EAAaE,QACfF,EAAeA,EAAaE,MAC5BD,GAAO,GAEkB,iBAAhBD,IACTA,EAAe5E,KAAK4E,IAEtB5E,KAAKkE,YAAYU,EAAaZ,QAASY,EAAaE,OAASF,EAAc5E,MAE7E,OAAOuE,EAWTS,iBAAiBjB,EAAWkB,EAAUjB,EAASI,GAQ7C,OAPIL,aAAqBzB,IAClB0B,IACHA,EAAUhE,KAAK0D,iBAEjBK,EAAUZ,wBAAwBnD,MAClCA,KAAK+E,UAAUf,EAASiB,EAAUlB,GAAW,EAAQK,GAA2BpE,KAAK2D,qBAEhFS,EAUTc,2BAA2BnB,EAAWC,EAASI,GAc7C,OAXApE,KAAKgF,iBACHjB,EACA,IAAIoB,KAIFpB,EAAUf,QAAQgB,KAAYmB,IAEhCnB,EACCI,GAA2BpE,KAAK2D,oBAE5BS,EAWTgB,iBAAiBrB,EAAWkB,EAAUjB,EAASI,GAQ7C,OAPIL,aAAqBzB,IAClB0B,IACHA,EAAUhE,KAAK0D,iBAEjBK,EAAUT,6BACVtD,KAAKkE,YAAYF,EAASiB,EAAUlB,EAAWK,IAE1CA,EAUTiB,wBAAwBtB,EAAWC,EAASI,GAC1C,MAAMkB,EAAMlB,GAA2BpE,KAAK2D,mBAS5C,OARA3D,KAAKoF,iBACHrB,EACA,IAAIoB,KACFpB,EAAUf,QAAQgB,KAAYmB,IAEhCnB,EACAsB,GAEKlB,EAYTW,UAAUf,EAASiB,EAAUM,EAASV,EAAMT,GAErCpE,KAAK4D,UAAUI,KAClBhE,KAAK4D,UAAUI,GAAW,IAG5B,MAAMwB,EAAM,CACVrB,GAAIc,EACJM,QAASA,GAAWvF,KACpB6E,KAAMA,EACNT,WAAaA,GAA2BpE,KAAK2D,oBAK/C,OAHA3D,KAAK4D,UAAUI,GAASyB,KAAKD,GAC7BxF,KAAK6D,cAAc0B,GAAWvB,EAC9BhE,KAAK0F,GAAG1B,EAAShE,KAAK2F,QAASJ,GACxBnB,EASTuB,QAAQ3B,KAAYmB,GAClB,IAAKnB,IAAYhE,KAAK4D,YAAc5D,KAAK4D,UAAUI,GAGjD,OAFAf,QAAQC,KAAM,YAAWlD,KAAKa,iBAAiBmD,yBAC/ChE,KAAK4D,UAAY,IAInB,IAAIgB,EAIAtE,EAAI,EACR,MAAMC,EAAIP,KAAK4D,UAAUI,GAASW,OAElC,IAAKrE,EAAI,EAAGA,EAAIC,EAAGD,IACjBsE,EAAe5E,KAAK4D,UAAUI,GAAS1D,GACnCsE,IAEEA,EAAaT,IAEfS,EAAaT,GAAG1D,KAAKmE,EAAaW,WAAYJ,GAK5CP,EAAaC,OACf7E,KAAKkE,YAAYF,EAASY,EAAaT,GAAIS,EAAaW,QAASX,EAAaR,YAC9E9D,MAMN,OAAO0D,EAWTE,YAAYF,EAASiB,EAAUM,EAASnB,GACtC,IAAKpE,KAAK4D,UAAUI,GAClB,OAGF,IAEIY,EAFAU,EAAMlB,GAA2BpE,KAAK2D,mBAExBrD,EAAI,EACtB,IAAKA,EAAI,EAAGA,EAAIN,KAAK4D,UAAUI,GAASW,OAAQrE,IAC9CsE,EAAe5E,KAAK4D,UAAUI,GAAS1D,GACnCsE,GACEA,EAAaR,aAAekB,GAAMV,EAAaW,UAAYA,IAE7DvF,KAAK4D,UAAUI,GAAS4B,OAAOtF,EAAG,GAClCA,WAEON,KAAK6D,cAAce,EAAaW,UAO7C,OAAOvB,EAWT6B,cAAc7B,EAASY,EAAcW,EAASnB,GAE5C,OADApE,KAAK+E,UAAUf,EAASY,EAAcW,GAAS,EAAMnB,GAC9CA,EAQT0B,cAAc9B,GACZ,MAAMrD,EAAIX,KAAK+F,WAAW/B,GAC1B,OAAQrD,EAAKA,EAAE4E,QAAU,KAO3B,eACE,OAAOvF,KAAK4D,UAQdmC,WAAW/B,GAIT,OAHKA,IACHA,EAAUhE,KAAK0D,iBAET1D,KAAK4D,UAAUI,GAAahE,KAAK4D,UAAUI,GAAY,KAQjE,qBACE,OAAOhE,KAAK+F,WAAW/F,KAAK0D,iBAO9B,wBACE,OAAO1D,KAAK2D","file":"presentation-mediator.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"next-core-utilities\"), require(\"presentation-view\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"presentation-mediator\", [\"next-core-utilities\", \"presentation-view\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"presentation-mediator\"] = factory(require(\"next-core-utilities\"), require(\"presentation-view\"));\n\telse\n\t\troot[\"presentation-mediator\"] = factory(root[\"next-core-utilities\"], root[\"presentation-view\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE__0__, __WEBPACK_EXTERNAL_MODULE__1__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","import { View } from \"presentation-view\";\n\n/**\n * <em>Colleague View</em> &mdash; The 'child' view.<br/>\n * The Colleague communicates with other Colleagues through its Mediator.<br/>\n * Supported options:</br/>\n * <ul>\n * <li>mediator - A mediator for this view</li>\n * </ul>\n * @param {object} options Options to pass\n * @extends View\n */\nclass Colleague extends View {\n  constructor(options) {\n    super(options);\n    if (options && options.mediator) {\n      this._mediator = mediator;\n    } else {\n      this._mediator = null;\n    }\n  };\n\n  /**\n   * Send a message to the mediator's queue\n   * @param {string} message Message to send\n   * @param {object} data Data to send with message\n   * @returns {string} Message sent\n   */\n  sendMessage(message, data) {\n    if (this._mediator) {\n      this._mediator.trigger(message, data);\n    } else {\n      console.warn(`sendMessage: No mediator is available for ${(this.name) ? this.name : \"-unnamed-\"}, talking to myself.`);\n    }\n    return message;\n  };\n\n  /**\n   * Set the mediator to this colleague\n   * @param {Mediator} mediator The mediator\n   * @deprecated set with: this.mediator = ...\n   * @returns {Mediator} The mediator\n   */\n  setMediatorMessageQueue(mediator) {\n    return this._setMediatorMessageQueue(mediator);\n  };\n\n  _setMediatorMessageQueue(mediator) {\n    //console.debug(`setMediatorMessageQueue: ${this.name} has a mediator? ${(this._mediator !== null)} and a mediator was passed? ${(mediator !== null)}`);\n    if (mediator) {\n      if (this._mediator) {\n        // already registered, send a dismiss message\n        //console.debug(`${this.name} already registered, send a dismiss message.`);\n        this._mediator._dismissMe(this);\n      }\n      this._mediator = mediator;\n    } else {\n      console.warn(\"Regstering a mediator without passing a mediator.\");\n    }\n    return mediator;\n  };\n\n  /**\n   * Remove the mediator from this colleague\n   * @returns {boolean} true\n   */\n  removeMediatorMessageQueue() {\n    this._mediator = null;\n    return true;\n  };\n\n  /**\n   * Property of the mediator\n   * @property {Mediator} mediator\n   */\n  get mediator() {\n    return this._mediator;\n  };\n\n  set mediator(mediator) {\n    return _setMediatorMessageQueue(mediator);\n  };\n};\n\nexport default Colleague;\n","import { extend } from \"next-core-utilities\";\nimport Colleague from \"./colleague.js\";\n\nconst DEFAULT_CHANNEL = \"augmentedChannel\";\nconst DEFAULT_IDENTIFIER = \"augmentedIdentifier\";\n\n/**\n * Mediator View - The mediator in the Mediator Pattern<br/>\n * The mediator defines the interface for communication between colleague views.\n * Loose coupling between colleague objects is achieved by having colleagues communicate\n * with the Mediator, rather than with each other.\n * <pre>\n * [Mediator]<-----[Colleague]\n *     ^-----------[Colleague]\n * </pre>\n * @extends Colleague\n * @param {object} options Options to set\n */\nclass Mediator extends Colleague {\n  constructor(options) {\n    if (!options) {\n      options = {};\n    }\n    if (!options.el) {\n      options.noEL = true;\n    }\n    super(options);\n    this._defaultChannel = DEFAULT_CHANNEL;\n    this._defaultIdentifier = DEFAULT_IDENTIFIER;\n    this._channels = {};\n    this._colleagueMap = {};\n    this._subscriptions = {};\n  };\n\n  /**\n   * Default Channel Property\n   * @property {string} defaultChannel The default channel for the view\n   * @private\n   */\n\n  /**\n   * Default identifier Property\n   * @property {string} defaultIdentifier The default identifier for the view\n   * @private\n   */\n\n  /**\n   * Channels Property\n   * @property {object} _channels The channels for the view (object array)\n   * @private\n   */\n\n  /**\n   * Colleague Map Property\n   * @property {object} _colleagueMap The colleagues observed by index in the channel\n   * @private\n   */\n\n  /**\n   * @property {Object} _subscriptions List of subscriptions\n   * @private\n   */\n\n  /**\n   * Dismiss a colleage\n   * @private\n   */\n  _dismissMe(colleague) {\n    if (colleague instanceof Colleague) {\n      const channel = this._colleagueMap[colleague], myChannelObject = this._channels[channel];\n      return this.unsubscribe(channel, myChannelObject.fn, colleague, myChannelObject.identifier);\n    }\n    return null;\n  };\n\n  /**\n   * Extend delegateEvents() to set subscriptions\n   * @param {array} event The events to undelegate\n   * @returns {array} the events\n   */\n  delegateEvents(events) {\n    super.delegateEvents(events);\n    this.subscriptions = {};\n    return events;\n  };\n\n  /**\n   * Extend undelegateEvents() to unset subscriptions\n   * @param {array} event The events to undelegate\n   * @returns {array} the events\n   */\n  undelegateEvents(events) {\n    super.undelegateEvents(events);\n    this.unsetSubscriptions();\n    return events;\n  };\n\n  /**\n   * Subscriptions\n   * @property {array} subscriptions\n   */\n  get subscriptions() {\n    return this._subscriptions;\n  };\n\n  set subscriptions(subscriptions) {\n    if (subscriptions) {\n      extend(this._subscriptions || {}, subscriptions);\n    }\n    subscriptions = subscriptions || this._subscriptions;\n    if (!subscriptions || (subscriptions.length === 0)) {\n      return;\n    }\n    // Just to be sure we don't set duplicate\n    this.unsetSubscriptions(subscriptions);\n\n    let i = 0, l = subscriptions.length;\n    for (i = 0; i < l; i++) {\n      let subscription = subscriptions[i];\n      let once = false;\n      if (subscription.$once) {\n        subscription = subscription.$once;\n        once = true;\n      }\n      if (typeof subscription === \"string\") {\n        subscription = this[subscription];\n      }\n      this.subscribe(subscription.channel, subscription, this, once);\n    }\n    return subscriptions;\n  };\n\n  /**\n   * Unsubscribe to each subscription\n   * @param {Object} subscriptions An optional hash of subscription to remove\n   * @returns {array} subscriptions\n   */\n  unsetSubscriptions(subscriptions) {\n    subscriptions = subscriptions || this._subscriptions;\n    if (!subscriptions || (subscriptions.length === 0)) {\n      return;\n    }\n\n    let i = 0;\n    const l = subscriptions.length;\n\n    for (i = 0; i < l; i++) {\n      let subscription = subscriptions[i];\n      let once = false;\n      if (subscription.$once) {\n        subscription = subscription.$once;\n        once = true;\n      }\n      if (typeof subscription == \"string\") {\n        subscription = this[subscription];\n      }\n      this.unsubscribe(subscription.channel, subscription.$once || subscription, this);\n    }\n    return subscriptions;\n  };\n\n  /**\n   * Observe a Colleague View - observe a Colleague and add to a channel\n   * @param {Colleague} colleague The Colleague to observe\n   * @param {function} callback The callback to call for this colleague\n   * @param {string} channel The Channel to add the pubished events to\n   * @param {string} identifier The identifier for this function\n   * @returns {string} The identifier\n   */\n  observeColleague(colleague, callback, channel, identifier) {\n    if (colleague instanceof Colleague) {\n      if (!channel) {\n        channel = this._defaultChannel;\n      }\n      colleague.setMediatorMessageQueue(this);\n      this.subscribe(channel, callback, colleague, false, (identifier) ? identifier : this._defaultIdentifier);\n    }\n    return identifier;\n  };\n\n  /**\n   * Observe a Colleague View - observe a Colleague and add to a channel and auto trigger events\n   * @param {Colleague} colleague The Colleague to observe\n   * @param {string} channel The Channel to add the pubished events to\n   * @param {string} identifier The identifier for this function\n   * @returns {string} The identifier\n   */\n  observeColleagueAndTrigger(colleague, channel, identifier) {\n    //console.debug(\"this\", this);\n    //console.debug(\"colleague\", colleague);\n    this.observeColleague(\n      colleague,\n      (...args) => {\n        //console.debug(\"triggered!\", args);\n        //console.debug(\"this\", this);\n        //console.debug(\"colleague\", colleague);\n        colleague.trigger(channel, ...args); //arguments[0], arguments[1]);\n      },\n      channel,\n      (identifier) ? identifier : this._defaultIdentifier\n    );\n    return identifier;\n  };\n\n  /**\n   * Dismiss a Colleague View - Remove a Colleague from the channel\n   * @param {Presentation.Colleague} colleague The Colleague to observe\n   * @param {function} callback The callback to call on channel event\n   * @param {string} channel The Channel events are pubished to\n   * @param {string} identifier The identifier for this function\n   * @returns {string} The identifier\n   */\n  dismissColleague(colleague, callback, channel, identifier) {\n    if (colleague instanceof Colleague) {\n      if (!channel) {\n        channel = this._defaultChannel;\n      }\n      colleague.removeMediatorMessageQueue();\n      this.unsubscribe(channel, callback, colleague, identifier);\n    }\n    return identifier;\n  };\n\n  /**\n   * Dismiss a Colleague View - Remove a Colleague from the channel that has an auto trigger\n   * @param {Colleague} colleague The Colleague to observe\n   * @param {string} channel The Channel events are pubished to\n   * @param {string} identifier The identifier for this function\n   * @returns {string} The identifier\n   */\n  dismissColleagueTrigger(colleague, channel, identifier) {\n    const id = (identifier) ? identifier : this._defaultIdentifier;\n    this.dismissColleague(\n      colleague,\n      (...args) => {\n        colleague.trigger(channel, ...args);//arguments[0], arguments[1]);\n      },\n      channel,\n      id\n    );\n    return identifier;\n  };\n\n  /**\n   * Subscribe to a channel\n   * @param {string} channel The Channel events are pubished to\n   * @param {function} callback The callback to call on channel event\n   * @param {object} context The context (or 'this')\n   * @param {boolean} once Toggle to set subscribe only once\n   * @param {string} identifier The identifier for this function\n   * @returns {string} The identifier\n   */\n  subscribe(channel, callback, context, once, identifier) {\n    //console.log(\"subscribe: callback\", callback);\n    if (!this._channels[channel]) {\n      this._channels[channel] = [];\n    }\n\n    const obj = {\n      fn: callback,\n      context: context || this,\n      once: once,\n      identifier: (identifier) ? identifier : this._defaultIdentifier\n    };\n    this._channels[channel].push(obj);\n    this._colleagueMap[context] = channel;\n    this.on(channel, this.publish, context);\n    return identifier;\n  };\n\n  /**\n   * Trigger all callbacks for a channel\n   * @param {string} channel The Channel events are pubished to\n   * @param {object} N Extra parameter to pass to handler\n   * @returns {string} The channel\n   */\n  publish(channel, ...args) {\n    if (!channel || !this._channels || !this._channels[channel]) {\n      console.warn(`Mediator ${this.name}: channel ${channel} doesn't exist.`);\n      this._channels = {};\n      return;\n    }\n\n    let subscription;\n    //console.debug(\"publish: args\", ...args);\n    //console.debug(\"publish: args type\", Array.isArray(args));\n\n    let i = 0;\n    const l = this._channels[channel].length;\n\n    for (i = 0; i < l; i++) {\n      subscription = this._channels[channel][i];\n      if (subscription) {\n        //console.debug(\"subscription\", subscription);\n        if (subscription.fn) {\n          //console.debug(\"calling subscription.fn with \", myArgs);\n          subscription.fn.call(subscription.context, ...args);\n          //subscription.fn.call(subscription.context, args);\n          //console.debug(\"the func\", subscription.fn);\n          //subscription.fn.apply(subscription.context, ...args);\n        }\n        if (subscription.once) {\n          this.unsubscribe(channel, subscription.fn, subscription.context, subscription.identifier);\n          i--;\n        }\n      } else {\n        //_logger.warn(\"AUGMENTED: Mediator: No subscription for channel '\" + channel + \"' on row \" + i);\n      }\n    }\n    return channel;\n  };\n\n  /**\n   * Cancel subscription\n   * @param {string} channel The Channel events are pubished to\n   * @param {function} callback The function callback registered (unused)\n   * @param {object} context The context (or 'this')\n   * @param {string} identifier The identifier for this function\n   * @returns {string} The channel\n   */\n  unsubscribe(channel, callback, context, identifier) {\n    if (!this._channels[channel]) {\n      return;\n    }\n\n    let id = (identifier) ? identifier : this._defaultIdentifier;\n\n    let subscription, i = 0;\n    for (i = 0; i < this._channels[channel].length; i++) {\n      subscription = this._channels[channel][i];\n      if (subscription) {\n        if (subscription.identifier === id && subscription.context === context) {\n          // originally compared function callbacks, but we don't always pass one so use identifier\n          this._channels[channel].splice(i, 1);\n          i--;\n\n          delete this._colleagueMap[subscription.context];\n        }\n      } else {\n        //_logger.warn(\"AUGMENTED: Mediator: No subscription for channel '\" + channel + \"' on row \" + i);\n        //logger.debug(\"AUGMENTED: Mediator: subscription \" + this._channels[channel]);\n      }\n    }\n    return channel;\n  };\n\n  /**\n   * Subscribing to one event only\n   * @param {string} channel The Channel events are pubished to\n   * @param {string} subscription The subscription to subscribe to\n   * @param {object} context The context (or 'this')\n   * @param {string} identifier The identifier for this function\n   * @returns {string} The identifier\n   */\n  subscribeOnce(channel, subscription, context, identifier) {\n    this.subscribe(channel, subscription, context, true, identifier);\n    return identifier;\n  };\n\n  /**\n   * Get All the Colleagues for a channel\n   * @param {string} channel The Channel events are pubished to\n   * @returns {array} The colleagues for a channel\n   */\n  getColleagues(channel) {\n    const c = this.getChannel(channel);\n    return (c) ? c.context : null;\n  };\n\n  /**\n   * Property for Channels\n   * @property {array} channels\n   */\n  get channels() {\n    return this._channels;\n  };\n\n  /**\n   * Get a specific channel\n   * @param {string} channel The Channel events are pubished to\n   * @returns {array} Returns the requested channel or null if nothing exists\n   */\n  getChannel(channel) {\n    if (!channel) {\n      channel = this._defaultChannel;\n    }\n    return (this._channels[channel]) ? (this._channels[channel]) : null;\n  };\n\n  /**\n   * Get the default channel<br/>\n   * Convenience method for _.channel = null;\n   * @property {array} Returns the default channel or null if nothing exists\n   */\n  get defaultChannel() {\n    return this.getChannel(this._defaultChannel);\n  };\n\n  /**\n   * Get the default identifier\n   * @property {string} Returns the default identifier\n   */\n  get defaultIdentifier() {\n    return this._defaultIdentifier;\n  };\n};\n\nexport default Mediator;\n"],"sourceRoot":""}